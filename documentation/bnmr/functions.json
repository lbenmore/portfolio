[
  {
    "name": "$$()",
    "syntax": "$$(selector)",
    "description": "Returns an element or array of elements based on selector type.",
    "parameters": [
      {
        "required": true,
        "name": "selector",
        "type": "String",
        "description": "CSS syntax for an element selector. Can be stringed and use attribute selectors."
      }
    ],
    "example": "$$(\"#container\");"
  },
  {
    "name": "on",
    "syntax": "on(event, callback)",
    "description": "Attaches function to various types of events on the element.",
    "parameters": [
      {
        "required": true,
        "name": "event",
        "type": "String",
        "description": "JavaScript event name."
      },
      {
        "required": true,
        "name": "callback",
        "type": "Function",
        "description": "Function or function reference to be called on trigger of event."
      }
    ],
    "example": "$$(\"#container\").on(\"click\", handleClick);\r$$(\"#container\").on(\"swipeleft\", function (e) {\r\talert(\"Swiped left on: \" + e.target.id);\r});"
  },
  {
    "name": "css",
    "syntax": "css(property, value [, delay])",
    "description": "Sets a CSS property on the element.",
    "parameters": [
      {
        "required": true,
        "name": "property",
        "type": "String",
        "description": "CSS property name."
      },
      {
        "required": true,
        "name": "value",
        "type": "Function",
        "description": "Valid value for the property given."
      },
      {
        "required": false,
        "name": "delay",
        "type": "Number",
        "description": "Length of the delay in milliseconds. Default: 0."
      }
    ],
    "example": "$$(\"#container\").css(\"background-color\", \"#e1e1e1\");\r$$(\"#container\").css(\"background-color\", \"#e1e1e1\", 1000);"
  },
  {
    "name": "animate",
    "syntax": "animate(properties [, duration, delay, ease])",
    "description": "Uses CSS transition to apply a simple animation to the element.",
    "parameters": [
      {
        "required": true,
        "name": "properties",
        "type": "Object",
        "description": "Object of CSS properties as keys and corresponding valid CSS values as their values."
      },
      {
        "required": false,
        "name": "duration",
        "type": "Number",
        "description": "Length of the duration of the animation in milliseconds. Default: 500."
      },
      {
        "required": false,
        "name": "delay",
        "type": "Number",
        "description": "Length of the delay of the animation in milliseconds. Default: 0."
      },
      {
        "required": false,
        "name": "ease",
        "type": "String",
        "description": "CSS name of easing function. Default is \"ease.\""
      }
    ],
    "example": "$$(\"#container\").animate({\r\t\"background-color\": \"#e1e1e1\",\r\t\"color\": \"#333\"\r}, 500, 1000, \"linear\");"
  },
  {
    "name": "addClass",
    "syntax": "addClass(className [, delay])",
    "description": "Add a CSS class to the element.",
    "parameters": [
      {
        "required": true,
        "name": "className",
        "type": "String",
        "description": "Name of the CSS class to be added to the element."
      },
      {
        "required": false,
        "name": "delay",
        "type": "Number",
        "description": "Length of delay before adding class in milliseconds. Default: 0."
      }
    ],
    "example": "$$(\"#container\").addClass(\"active\", 1000);"
  },
  {
    "name": "removeClass",
    "syntax": "removeClass(className [, delay])",
    "description": "Remove a CSS class from the element.",
    "parameters": [
      {
        "required": true,
        "name": "className",
        "type": "String",
        "description": "Name of the CSS class to be removed to the element."
      },
      {
        "required": false,
        "name": "delay",
        "type": "Number",
        "description": "Length of delay before removing class in milliseconds. Default: 0."
      }
    ],
    "example": "$$(\"#container\").removeClass(\"active\", 1000);"
  },
  {
    "name": "replaceClass",
    "syntax": "replaceClass(currentClassName, replacementClassName [, delay])",
    "description": "Add a CSS class to the element.",
    "parameters": [
      {
        "required": true,
        "name": "currentClassName",
        "type": "String",
        "description": "Name of the current CSS class to be replaced."
      },
      {
        "required": true,
        "name": "replacementClassName",
        "type": "String",
        "description": "Name of the CSS class to be added to the element."
      },
      {
        "required": false,
        "name": "delay",
        "type": "Number",
        "description": "Length of delay before replacing class in milliseconds. Default: 0."
      }
    ],
    "example": "$$(\"#container\").replaceClass(\"active\", \"inactive\", 1000);"
  },
  {
    "name": "toggleClass",
    "syntax": "toggleClass(className [, delay])",
    "description": "If element has specified class, class is removed. Otherwise, class is added to element.",
    "parameters": [
      {
        "required": true,
        "name": "className",
        "type": "String",
        "description": "Class name to be toggled."
      },
      {
        "required": false,
        "name": "delay",
        "type": "Number",
        "description": "Length of delay before toggling class in milliseconds. Default: 0."
      }
    ],
    "example": "$$(\"#container\").toggleClass(\"active\", 1000);"
  },
  {
    "name": "$$.ajax",
    "syntax": "$$.ajax(options [, callback, file])",
    "description": "Creates an AJAX call to an external file.",
    "parameters": [
      {
        "required": true,
        "name": "options",
        "type": "Object",
        "description": "\"url\"*: Path to the file being requested.<br><br>\"type\": Response type expected. Options: \"ajax\", \"json\". Default: \"ajax\".<br><br>\"method\": HTTP method for requesting the data. Options: any HTTP request method. Default: \"GET\".<br><br>\"async\": Boolean of whether the call should be made asynchrously. Default: true."
      },
      {
        "required": false,
        "name": "callback",
        "type": "Function",
        "description": "Function to execute after request is complete. Passes the returned data through the first (and only) parameter."
      },
      {
        "required": false,
        "name": "file",
        "type": "File",
        "description": "Used when sending file data using the Files API"
      }
    ],
    "example": "$$.ajax({\r\t\"type\": \"json\",\r\t\"method\": \"POST\",\r\t\"url\": \"./path/to/file.json\",\r\t\"async\": false\r}, function (data) {\r\tdata.foreach(function(item){\r\t\tconsole.log(item);\r\t});\r});"
  },
  {
    "name": "$$.getParam",
    "syntax": "$$.getParam(urlQueryParameter)",
    "description": "Returns the value of a URL query parameter",
    "parameters": [
      {
        "required": true,
        "name": "urlQueryParameter",
        "type": "String",
        "description": "The key of the URL query parameter."
      }
    ],
    "example": "$$.getParam(\"search\");\r$$.getParam(\"page\");"
  },
  {
    "name": "$$.log",
    "syntax": "$$.log(msg [, type])",
    "description": "Prints debugging messages to the console including the caller function and line and character numbers, using directory when available and appropriate.",
    "parameters": [
      {
        "required": "true",
        "name": "msg",
        "type": "Mixed",
        "description": "If a string, passes as a message to the console. If an object and \"console.dir\" is available, prints the tree of the object."
      },
      {
        "required": false,
        "name": "type",
        "type": "String",
        "description": "Name of the message type to pass to the console. Options \"log\", \"warning\", \"error\". Default: \"log\"."
      }
    ],
    "example": "$$.log('Does not compute!', 'error'); \r$$.log(objProperties);"
  },
  {
    "name": "$$.preload",
    "syntax": "$$.preload(asset[s])",
    "description": "Preloads an asset(s).",
    "parameters": [
      {
        "required": true,
        "name": "assets",
        "type": "String/Array",
        "description": "Path to asset asset or array of paths to assets to be preloaded."
      }
    ],
    "example": "$$.preload(\"bkg.png\");\r$$.prelad([\r\t\"image01.png\",\r\t\"image02.png\",\r\t\"image03.png\",\r]);"
  },
  {
    "name": "$$.rand",
    "syntax": "$$.rand(min, max)",
    "description": "Returns a random integer between two given integers.",
    "parameters": [
      {
        "required": true,
        "name": "min",
        "type": "Number",
        "description": "Minimum integer that can be returned."
      },
      {
        "required": true,
        "name": "max",
        "type": "Number",
        "description": "Maximum integer that can be returned."
      }
    ],
    "example": "$$.rand();"
  }
]
